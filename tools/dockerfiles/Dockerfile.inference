# Copyright (c) 2021, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG TRITON_VERSION=21.08-py3
FROM nvcr.io/nvidia/tritonserver:${TRITON_VERSION} AS devel

ARG CMAKE_VERSION=3.19.6
ARG PYTHON_VERSION=3.8
ARG RAPIDS_VERSION=21.06
ARG TRITON_BRANCH=r21.04

ARG SM="70;75;80"
ARG RELEASE=false

RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        git \
        gdb \
        make \
        wget \
        clang-format \
        libnuma-dev \
        libboost-all-dev \
        libboost-regex-dev \
        libboost-system-dev \
        libboost-filesystem-dev \
        curl && \
    rm -rf /var/lib/apt/lists/*

RUN mkdir -p /var/tmp && wget -q -nc --no-check-certificate -P /var/tmp http://repo.anaconda.com/miniconda/Miniconda3-4.7.12-Linux-x86_64.sh && \
    bash /var/tmp/Miniconda3-4.7.12-Linux-x86_64.sh -b -p /opt/conda && \
    /opt/conda/bin/conda init && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    /opt/conda/bin/conda clean -afy && \
    rm -rf /var/tmp/Miniconda3-4.7.12-Linux-x86_64.sh
ENV CPATH=/opt/conda/include:$CPATH
ENV LD_LIBRARY_PATH=/opt/conda/lib:$LD_LIBRARY_PATH
ENV LIBRARY_PATH=/opt/conda/lib:$LIBRARY_PATH
ENV PATH=/opt/conda/bin:$PATH
ENV CONDA_PREFIX=/opt/conda
ENV NCCL_LAUNCH_MODE=PARALLEL

RUN conda update -n base -c defaults conda && \
    conda install -c rapidsai -c nvidia -c numba -c conda-forge \
        cudf=${RAPIDS_VERSION} \
        python=${PYTHON_VERSION} \
        cupy \
        cudatoolkit \
        rapidjson \
        cmake=${CMAKE_VERSION} \
        pip \
        pandas \
        sklearn-pandas && \
    conda clean -afy

COPY clean_conda.sh .
RUN chmod +x ./clean_conda.sh && \
    ./clean_conda.sh cudnn nccl && \
    rm -rfv ./clean_conda.sh

#Hiredis
RUN mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 https://github.com/redis/hiredis.git && cd - && \
    cd /var/tmp/hiredis && \
    mkdir build && cd build && \
    cmake .. && \
    make -j$(nproc) && make install && \
    rm -rf /var/tmp/hiredis

#RocksDB
RUN mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 https://github.com/facebook/rocksdb.git && cd - && \
    cd /var/tmp/rocksdb && \
    make -j$(nproc) shared_lib && \
    make install-shared && \
    rm -rf /var/tmp/rocksdb
ENV CPATH=/usr/local/include:$CPATH

RUN pip3 install --no-cache-dir nvidia-pyindex tritonclient[all]

RUN CUDA_PATH=`find /usr/local/ -name "cuda-*.?" | head -n 1` && \
    echo "link $CUDA_PATH to /usr/local/cuda" && \
    ln -s $CUDA_PATH /usr/local/cuda

# HugeCTR Inference
RUN if [ "$RELEASE" = "true" ]; \
    then \
      mkdir -p /var/tmp && cd /var/tmp && git clone --depth=1 --branch master https://github.com/NVIDIA/HugeCTR.git HugeCTR && cd - && \
      cd /var/tmp/HugeCTR && \
      git submodule update --init --recursive && \
      mkdir -p build && cd build && \
      cmake -DCMAKE_BUILD_TYPE=Release -DSM=$SM -DENABLE_INFERENCE=ON .. && make -j$(nproc) && make install && \
      export CPATH=/usr/local/hugectr/include:$CPATH && \
      export LIBRARY_PATH=/usr/local/hugectr/lib:$LIBRARY_PATH && \
      cd /var/tmp && git clone https://github.com/triton-inference-server/hugectr_backend.git hugectr_inference_backend && \
      cd /var/tmp/hugectr_inference_backend && \
      mkdir build && cd build && \
      cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/hugectr \
            -DTRITON_COMMON_REPO_TAG=$TRITON_BRANCH \
            -DTRITON_CORE_REPO_TAG=$TRITON_BRANCH \
            -DTRITON_BACKEND_REPO_TAG=$TRITON_BRANCH  .. && \
      make -j && make install && \
      rm -rf /var/tmp/HugeCTR /var/tmp/hugectr_inference_backend; \
    else \
      echo "Build container for development successfully"; \
    fi
ENV CPATH=/usr/local/hugectr/include:$CPATH
ENV LIBRARY_PATH=/usr/local/hugectr/lib:$LIBRARY_PATH
ENV LD_LIBRARY_PATH=/usr/local/hugectr/lib:$LD_LIBRARY_PATH
ENV PATH=/usr/local/hugectr/bin:$PATH
